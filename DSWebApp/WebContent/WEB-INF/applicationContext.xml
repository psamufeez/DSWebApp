<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans.xsd
	   		http://www.springframework.org/schema/tx 
	   		http://www.springframework.org/schema/tx/spring-tx.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/util 
			http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="false">
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="false">
		  	<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">	
		  		<property name="objectMapper" ref="objectMapper" />
		  	</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"
		p:indentOutput="true">
		<property name="serializersByType">
			<map key-type="java.lang.Class">
				<entry key="java.sql.Timestamp">
					<bean class="com.ds.web.util.SqlTimestampJsonSerializer" />
				</entry>
				<entry key="java.sql.Date">
					<bean class="com.ds.web.util.SqlDateJsonSerializer" />
				</entry>
				<entry key="java.util.Date">
					<bean class="com.ds.web.util.DateJsonSerializer" />
				</entry>
			</map>
		</property>
		<property name="deserializersByType">
			<map key-type="java.lang.Class">
				<entry key="java.sql.Timestamp">
					<bean class="com.ds.web.util.SqlTimestampJsonDeserializer" />
				</entry>
				<entry key="java.sql.Date">
					<bean class="com.ds.web.util.SqlDateJsonDeserializer" />
				</entry>
				<entry key="java.util.Date">
					<bean class="com.ds.web.util.DateJsonDeserializer" />
				</entry>
			</map>
		</property>
		
		<property name="featuresToEnable">
	        <array>
	            <util:constant static-field="com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY" />
	        </array>
	    </property>
	</bean>
	
	<context:annotation-config />
	<context:component-scan base-package="com.ds.service" />	
	<context:component-scan base-package="com.ds.controller" />	
	<context:component-scan base-package="com.ds.validator" />
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSizePerFile" value="10485760"/>
	</bean>
		
	<mvc:resources mapping="/resources/**" location="/resources/"/>
	
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
        	<value>classpath:Resources,classpath:org/hibernate/validator/ValidationMessages</value>
        </property>
        <property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	    <property name="validationMessageSource" ref="messageSource" />
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
	    <property name="url" value="jdbc:mysql://162.253.124.18:3306/dsapptra_prod_mas?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC"/>
	    <property name="username" value="dsapptra_admin"/>
	    <property name="password" value="durability#solidity#1234"/>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.ds.data</value>
			</list>
		</property>
		<!-- <property name="jtaTransactionManager" ref="transactionManager" /> -->
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>  
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			</props>
		</property>
		<!-- <property name="entityInterceptor" ref="entityInterceptor" /> -->
	</bean>
	
	<!-- <bean id="entityInterceptor" class="com.ds.service.SaveUpdateInterceptor"></bean> -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
	    <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" /> -->
	
	 <!-- the transactional advice (i.e. what 'happens'; see the <aop:advisor/> bean below) -->
  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<!-- the transactional semantics... -->
    	<tx:attributes>
      		<!-- all methods starting with 'get' are read-only -->
      		<tx:method name="get*" read-only="true"/>
      		<tx:method name="find*" read-only="true"/>
      		<tx:method name="update*" timeout="300"/>
      		<tx:method name="confirm*" timeout="300"/>
      		<tx:method name="create*" timeout="300"/>
      		<tx:method name="*" read-only="true"/>
	   	</tx:attributes>
  	</tx:advice>
  	
    <!-- ensure that the above transactional advice runs for any execution of an operation defined by the any interfaces of service -->
  	<aop:config>
    	<aop:pointcut id="servicesOperation" expression="execution(public * com.ds.controller..*.*(..))"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="servicesOperation"/>
  	</aop:config>
  	
</beans>